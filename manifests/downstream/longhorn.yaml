apiVersion: v1
kind: Namespace
metadata:
  name: longhorn-system
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: longhorn
  namespace: kube-system
spec:
  jobImage: %%REGISTRY%%/%%STAGE%%/docker.io/rancher/klipper-helm:v0.4.3
  chart: https://%%CLUSTER%%.%%DOMAIN%%:9345/static/charts/longhorn-100.1.1+up1.2.3.tgz
  targetNamespace: longhorn-system
  valuesContent: |-
    # Default values for longhorn.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    global:
      cattle:
        systemDefaultRegistry: ""

    service:
      ui:
        type: ClusterIP
        nodePort: null
      manager:
        type: ClusterIP
        nodePort: ""
    
    persistence:
      defaultClass: true
      defaultClassReplicaCount: 3
      reclaimPolicy: Delete
      recurringJobs:
        enable: true
        jobList: >-
          [{"name":"backup", "task":"backup", "cron":"0 1 * * *", "retain":8,"labels": {"interval":"dailybackup"}},{"name":"snapshot", "task":"snapshot", "cron":"30 * * * *", "retain":25,"labels": {"interval":"hourlysnapshot"}}]
    
    csi:
      kubeletRootDir: ~
      attacherReplicaCount: ~
      provisionerReplicaCount: ~
      resizerReplicaCount: ~
      snapshotterReplicaCount: ~
    
    defaultSettings:
      backupTarget: s3://%%CLUSTER%%@de-bw-1/
      backupTargetCredentialSecret: longhorn-backup-minio-secret
      allowRecurringJobWhileVolumeDetached: ~
      createDefaultDiskLabeledNodes: ~
      defaultDataPath: ~
      defaultDataLocality: ~
      replicaSoftAntiAffinity: ~
      storageOverProvisioningPercentage: ~
      storageMinimalAvailablePercentage: ~
      upgradeChecker: false
      defaultReplicaCount: ~
      guaranteedEngineCPU: ~
      defaultLonghornStaticStorageClass: ~
      backupstorePollInterval: ~
      taintToleration: ~
      priorityClass: ~
      autoSalvage: ~
      autoDeletePodWhenVolumeDetachedUnexpectedly: ~
      disableSchedulingOnCordonedNode: ~
      replicaZoneSoftAntiAffinity: ~
      volumeAttachmentRecoveryPolicy: ~
      nodeDownPodDeletionPolicy: ~
      allowNodeDrainWithLastHealthyReplica: ~
      mkfsExt4Parameters: ~
      disableReplicaRebuild: ~
      replicaReplenishmentWaitInterval: ~
      disableRevisionCounter: ~
      systemManagedPodsImagePullPolicy: ~
      allowVolumeCreationWithDegradedAvailability: ~
      autoCleanupSystemGeneratedSnapshot: ~
    
    privateRegistry:
      registryUrl: %%REGISTRY%%/%%STAGE%%/docker.io
      registryUser: ~
      registryPasswd: ~
      registrySecret: ~
    
    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi
      #
    
    ingress:
      ## Set to true to enable ingress record generation
      enabled: true
    
    
      host: longhorn.%%CLUSTER%%.%%DOMAIN%%
    
      ## Set this to true in order to enable TLS on the ingress record
      ## A side effect of this will be that the backend service will be connected at port 443
      tls: true
    
      ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
      tlsSecret: longhorn.%%CLUSTER%%.%%DOMAIN%%
    
      ## Ingress annotations done as key:value pairs
      ## If you're using kube-lego, you will want to add:
      ## kubernetes.io/tls-acme: true
      ##
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
      ##
      ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: %%CLUSTER%%-issuer
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: longhorn-basic-auth
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required '
        # kubernetes.io/tls-acme: true
    
      secrets:
      ## If you're providing your own certificates, please use this to add the certificates as secrets
      ## key and certificate should start with -----BEGIN CERTIFICATE----- or
      ## -----BEGIN RSA PRIVATE KEY-----
      ##
      ## name should line up with a tlsSecret set further up
      ## If you're using kube-lego, this is unneeded, as it will create the secret for you if it is not set
      ##
      ## It is also possible to create and manage the certificates outside of this helm chart
      ## Please see README.md for more information
      # - name: longhorn.local-tls
      #   key:
      #   certificate:
    
    # Configure a pod security policy in the Longhorn namespace to allow privileged pods
    enablePSP: true
    
    ## Specify override namespace, specifically this is useful for using longhorn as sub-chart
    ## and its release namespace is not the `longhorn-system`
    namespaceOverride: ""
    
